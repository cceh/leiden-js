import {styleTags, Tag, tags as t} from "@lezer/highlight";
import {NodePropSource} from "@lezer/common";
import {HighlightStyle} from "@codemirror/language";

const leidenTransTags = {
    translationBracket: Tag.define(t.comment),
    translationLanguageId: Tag.define(t.regexp),
    divBracket: Tag.define(t.comment),
    paragraphBracket: Tag.define(t.comment),
    lineNum: Tag.define(t.comment),
    lineNumBreak: Tag.define(t.string),
    lineNumNumber: Tag.define(t.strong),
    erasure: Tag.define(t.deleted),
    erasureContent: Tag.define(t.deleted),
    gap: Tag.define(t.string),
    lost: Tag.define(t.string),
    editorialComment: Tag.define(t.annotation),
    term: Tag.define(t.literal),
    definition: Tag.define(t.typeName),
    equals: Tag.define(t.meta),
    foreign: Tag.define(t.keyword),
    foreignLanguageId: Tag.define(t.bool),
    app: Tag.define(t.bool),
    appType: Tag.define(t.className),
    appResp: Tag.define(t.emphasis)
}

export const leidenTranslationHighlighting: NodePropSource =  styleTags({
    "Translation/Delims": leidenTransTags.translationBracket,
    "Translation/*/LanguageId": [t.emphasis, t.strong, leidenTransTags.translationLanguageId],
    "Div/Delims": t.local(leidenTransTags.divBracket),
    "P/Delims": t.local(leidenTransTags.paragraphBracket),
    "LineNum/...": leidenTransTags.lineNum,
    "LineNumBreak/...": leidenTransTags.lineNumBreak,
    "LineNum/Number LineNumBreak/Number": leidenTransTags.lineNumNumber,
    "Erasure/Delims": leidenTransTags.erasure,
    "Erasure/Content!": [leidenTransTags.erasure, leidenTransTags.erasureContent],
    "Gap/...": leidenTransTags.gap,
    "Lost/...": leidenTransTags.lost,
    "EditorialComment! Note!": leidenTransTags.editorialComment,
    "Term/Delims Term/Content/Text!": leidenTransTags.term,
    "=": leidenTransTags.equals,
    "Definition": [t.emphasis, leidenTransTags.definition],
    "Foreign/ForeignEnd Foreign/~| Foreign/Content/Text!": leidenTransTags.foreign,
    "LanguageId Foreign/ForeignEnd/LanguageId": [t.emphasis, leidenTransTags.foreignLanguageId],
    "App App/Delims App/Content/Text": leidenTransTags.app,
    "AppType": [t.emphasis, leidenTransTags.appType],
    "AppResp": [t.emphasis, leidenTransTags.appResp],
})

export const leidenTransHighlightStyle = HighlightStyle.define([
    {tag: leidenTransTags.translationBracket,
        color: "#1E429F"},
    {tag: leidenTransTags.translationLanguageId,
        color: "#2563EB",
        fontStyle: "italic"},
    {tag: leidenTransTags.divBracket,
        color: "#2563EB"},
    {tag: t.local(leidenTransTags.paragraphBracket),
        color: "#3B82F6"},

    {tag: leidenTransTags.lineNum,
        color: "#881337"},
    {tag: leidenTransTags.lineNumNumber,
        fontWeight: "bold"},
    {tag: leidenTransTags.lineNumBreak,
        color: "#be123c"},

    {tag: leidenTransTags.erasure,
        color: "#991B1B"},
    {tag: leidenTransTags.erasureContent,
        textDecoration: "line-through"},
    {tag: leidenTransTags.gap,
        color: "#B91C1C"},
    {tag: leidenTransTags.lost,
        color: "#DC2626"},

    {tag: leidenTransTags.editorialComment,
        color: "#64748B"},
    {tag: leidenTransTags.term,
        color: "#065f22"},
    {tag: [leidenTransTags.definition],
        color: "#0b8c2c",
        fontStyle: "italic"},
    {tag: leidenTransTags.equals,
        color: "#10b954"},

    {tag: leidenTransTags.app,
        color: "#1f00ea"},
    {tag: leidenTransTags.appType,
        color: "#534ee3",
        fontStyle: "italic"},
    {tag: leidenTransTags.appResp,
        color: "#827fda"},

    {tag: leidenTransTags.foreign,
        color: "#8328d9"},
    {tag: leidenTransTags.foreignLanguageId,
        color: "#af7edc",
        fontStyle: "italic"}
]);